version: 2.1

orbs:
  python: circleci/python@0.2.1
  win: circleci/windows@2.2.0

jobs:
  # Linting and unit test
  unittest:
    executor: 
      name: python/default
      tag: "3.7"
    steps:
      - checkout
      - run:
          name: Install Python Dependencies
          command : |
            pip install -r requirements.txt

      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name : Run Unit Tests
          command: |
            pytest --disable-warnings
            flake8 --max-line-length=120 --ignore=PT009,E203,W503,W601
  
  # The same as unittest but for Windows machine
  win-unittest:
    executor:
      name: win/default
      shell: powershell.exe

    steps:
      - checkout
      - run:
          name: Install Python Dependencies
          command : |
            pip install -r requirements.txt
      - save_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name : Run Unit Tests
          command: |
            pytest --disable-warnings
            flake8 --max-line-length=120 --ignore=PT009,E203,W503,W601

  # Linux integration
  Integration-on-linux:
    # Primary container image where all commands run
    executor: postgres-orbs
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client-9.6
      - run: whoami
      - run:
          sudo pip3 install psycopg2 requests
      - run:    
          python app.py


  # Windows integration
  Integration-on-windows:
    #executor: postgres-orbs
    #steps:
    #  - checkout
    #  - run:
    #      name: Install postgresql
    #      command : |
    #        sudo pip3 install psycopg2
    #  - run:
    #      name: Install Python Dependencies
    #      command : |
    #        python app.py

    executor: win/default # executor type
    environment:
      PGDATA: "C:\Program Files\PostgreSQL\13\data"
    steps:
      # Commands are run in a Windows virtual machine environment
      - checkout
      - run: Write-Host 'Hello, Windows'
      #- run:    
      #    name: python install
      #    command: |
      #      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      #      Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.7.0/python-3.7.0.exe" -OutFile "~\python-3.7.0.exe"
      #      ~\python-3.7.0.exe /quiet InstallAllUsers=0 PrependPath=1 Include_test=0
      - run:
          name: install choco & postgres & python
          command: |
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            choco install postgresql
            choco install python
      - run:
          name: pip install
          command: |
            #~\python-3.7.0.exe -m pip install --upgrade pip
            python -m pip install --upgrade pip
            #~\python-3.7.0.exe -m pip -V
            python -m pip -V
            pip3 install psycopg2
            
      - run:
          name: postgres configuratin
          command: |
            #[Alias('PGData')][String]$pgDataPath="C:\Program Files\PostgreSQL\13\data"
            pg_ctl init
            pg_ctl start
            createdb IsaTab
            create user post_user with encrypted password 'password'
            grant all privileges on database IsaTab to post_user
            
      - run:
          name: python connection test
          command : |
            python app.py



  # MacOS integration
  Integration-on-macos:
    macos:
      xcode: 11.3.0
    steps:
      - checkout
      - run:
          name: Install PostgresSQL

          environment:
            POSTGRES_USER: circleCI
            POSTGRES_DB: circleCI_test

          command: |
            brew install postgresql

      - run:
          name: Integrate IsaTAB.sql into the database
          command: |
            psql -c "create database Isatab_DB" -U postgres -h localhost -p 5432
            psql -f AutoFlow-OmicsDataHandling/IsaTab.sql Isatab_DB

executors:
  postgres-orbs:
    docker:
      #- image: circleci/python:3.6.2-stretch-browsers
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: post_user
          POSTGRES_DB: IsaTab
          POSTGRES_PASSWORD: password

workflows:
  main:
    jobs:
#      - unittest
#      - win-unittest
#      - Integration-on-postgres
#      - Integration-on-linux
      - Integration-on-windows
#      - Integration-on-macos
